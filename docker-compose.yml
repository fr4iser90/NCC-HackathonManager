services:
  hackathon-db:
    build:
      context: ./database
      dockerfile: Dockerfile
    image: fr4iser/hackathon-platform:db
    container_name: hackathon-db
    ports:
      - "5432:5432"
    volumes:
      - hackathon-db-data:/var/lib/postgresql/data
    env_file:
      - .env # Will load DB credentials from .env in the project root
    restart: unless-stopped

  hackathon-api:
    build:
      context: ./api
      dockerfile: Dockerfile
    image: fr4iser/hackathon-platform:api
    container_name: hackathon-api
    ports:
      - "8000:8000"
    depends_on:
      hackathon-db:
        condition: service_healthy
    env_file:
      - .env # Will load API and INITIAL_ADMIN credentials from .env
    volumes:
      - api_logs:/app/logs # Mount volume for logs
      - /var/run/docker.sock:/var/run/docker.sock # Mount Docker socket for Docker-outside-of-Docker (DooD)
    restart: unless-stopped
    
  hackathon-frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    image: fr4iser/hackathon-platform:frontend
    container_name: hackathon-frontend
    ports:
      - "3030:3000" # Exposing frontend on host port 3000
    depends_on:
      - hackathon-api
    env_file:
      - .env
    volumes:
      - frontend_logs:/app/logs # Mount volume for logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://hackathon-api:8000/ping"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s

volumes:
  hackathon-db-data:
    driver: local
  api_logs:
    driver: local
  frontend_logs:
    driver: local
